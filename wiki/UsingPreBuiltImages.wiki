#summary This page discusses using the pre-built 0xdroid images on Beagleboard quickly.

= Introduction =

Using the pre-built 0xdroid without having to [Source download and build the source] is hopefully working within minutes. There are a couple of ways to do this, primarily a NAND boot and an SD card boot.

== Obtain Prebult Images ==

You can fetch the pre-built images from [http://downloads.0xlab.org/release/ 0xdroid release] or the experimental [http://downloads.0xlab.org/dailybuild/ images built by daily-build host], then follow the instructions to install into Beagleboard environment. Alternatively, it is possible to install the image files generated by [Source download and build the source] process into Beagleboard as well.
 * Copy 'out/target/product/beagleboard/system.img' to 'android-beagle.ubi'
 * Copy 'arch/arm/boot/uImage' to '0xkernel-beagle.bin'

== Installation ==

Make sure that Beagleboard hardware is properly set up first.  Check wiki page [hardware_beagleboard] in advance.  You can either use automated approach (for dummies) or go through the details (for geeks).

=== for dummies ===
 * Format the first partition over than 100MB with VFAT on a SD card. 
 * Download the installer: [http://downloads.0xlab.org/installer/beagle-cupcake-0x2/uImage.bin uImage.bin] into SD card
 * Download [http://downloads.0xlab.org/release/beagle-cupcake-0x2/0xkernel-beagle.bin 0xkernel-beagle.bin]
 * Download [http://downloads.0xlab.org/release/beagle-cupcake-0x2/android-beagle.ubi android-beagle.ubi]
 * Copy the installer uImage.bin image into the first partition of SD/MMC card
 * Copy two files 0xkernel-beagle.bin and android-beagle.ubi into the first partition of SD/MMC card
 * Plug the SD card in beagleboard SD slot and restart the beagleboard
 * Wait for UI installer over.  The installer would perform NAND flashing and u-boot environment setup.
 * Unplug SD card from the Beagleboard and reboot
 * Enjoy!

Format SD card instructions under GNU/Linux:
 * insert the SD card, wait it been detected, say /dev/mmcblk0 
  * It may be different with different SD device, you can check it via "dmesg")
{{{
dmesg | tail
}}}
  You should see something like -
{{{
scsi 5:0:0:0: Direct-Access     Multi    Flash Reader     1.00 PQ: 0 ANSI: 0
sd 5:0:0:0: Attached scsi generic sg2 type 0
usb-storage: device scan complete
sd 5:0:0:0: [sdb] Attached SCSI removable disk
sd 5:0:0:0: [sdb] 3862528 512-byte logical blocks: (1.97 GB/1.84 GiB)
sd 5:0:0:0: [sdb] Assuming drive cache: write through
sd 5:0:0:0: [sdb] Assuming drive cache: write through
 sdb: sdb1 sdb2
}}}
  If you are using the built-in SD/MMC slot, the device name would be /dev/mmcblk?
 * If any partition been mounted automatically, please umount.
 * According to the above device name about SD/MMC, create and format the partitions:
{{{
sudo fdisk /dev/mmcblk0
}}}
 or
{{{
sudo fdisk /dev/sdb
}}}
  * press "d" delete the origin partitions
  * press "n" creating new partition, select partition 1, and give over 100MB to it
  * press "t" and select partition 1. Change the partition label to "b" (W95 FAT32)
   * creating other partitions as you wish (optional)
  * press "p" to confirm the partitions.  The reference output:
{{{
Command (m for help): p

Disk /dev/sdd: 1977 MB, 1977614336 bytes
64 heads, 63 sectors/track, 957 cylinders
Units = cylinders of 4032 * 512 = 2064384 bytes
Disk identifier: 0x00000000

Device Boot      Start         End      Blocks   Id  System
/dev/sdd1            1          30       60448+   b  W95 FAT32
/dev/sdd2           31         957     1868832   83  Linux
}}}
  * press "wq" write back and quit fdisk
 * Format the partition for use: 
{{{
sudo mkfs.vfat -n DISK_INSTALLER /dev/mmcblk0p1
}}}
 or
{{{
sudo mkfs.vfat -n DISK_INSTALLER /dev/sdb1
}}}

=== for geeks ===
Check wiki page [boot_nand] as reference. 